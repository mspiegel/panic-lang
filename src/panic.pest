WHITESPACE    =  _{ " " | "\t" | NEWLINE }

program       =   { SOI ~ topdecl* ~ EOI }
topdecl       =   { function }
function      =   { "fn" ~ ident ~ "(" ~ func_params? ~ ")" ~ "->" ~ typename ~ stmt_block }
typename      =   { typei32 | typebool | typeunit }
typei32       =   { "i32" }
typebool      =   { "bool" }
typeunit      =   { "()" }
func_params   =   { func_param ~ ("," ~ func_param)* ~ ","? }
func_param    =   { ident ~ ":" ~ typename }
stmt_block    =   { "{" ~ stmt+ ~ "}" }

stmt          =   { ";" | macro_stmt | let_stmt | return_stmt | if_stmt | expr_stmt }
let_stmt      =   { "let" ~ ident ~ ":" ~ typename ~ "=" ~ expr ~ ";" }
expr_stmt     =   { expr ~ ";" }
return_stmt   =   { "return" ~ expr ~ ";" }
if_stmt       =   { "if" ~ expr ~ stmt_block ~ ( "else" ~ ( stmt_block | if_stmt ) )? }

expr          =   { compare }
compare       =   { addsub ~ ( ( lt | le | eq | ne | ge | gt ) ~ addsub )? }
addsub        =   { muldiv ~ ( (add | sub) ~ muldiv )* }
muldiv        =   { unary ~  ( (mul | div | modulo ) ~ unary )* }
unary         =   { negative? ~ term }
term          =   { func_call | primary }

lt            =   { "<"  }
le            =   { "<=" }
eq            =   { "==" }
ne            =   { "!=" }
ge            =   { ">=" }
gt            =   { ">"  }
add           =   { "+"  }
sub           =   { "-"  }
mul           =   { "*"  }
div           =   { "/"  }
modulo        =   { "%"  }
negative      =   { "-"  }

func_call     =   { ident ~ "(" ~ call_params? ~ ")" }
call_params   =   { expr ~ ("," ~ expr)* ~ ","? }
primary       =   { ident | literal | paren }
paren         =   { "(" ~ expr ~ ")" }
ident         =   { !keyword ~ any_ident }
literal       =   { int_literal | truelit | falselit | unitlit }
truelit       =   { "true"  }
falselit      =   { "false" }
unitlit       =   { "()"    }

int_literal   =  @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
any_ident     =  @{ XID_START ~ XID_CONTINUE* }
keyword       =  @{ "fn" | "i32" | "bool" | "let" | "return" | "if" | "else" | "true" | "false" }

macro_stmt    =   { macro_ident ~ "(" ~ macro_params? ~ ")" ~ ";" }
macro_params  =   { macro_expr ~ ("," ~ macro_expr)* ~ ","? }
macro_expr    =   { compare | str_literal }
str_literal   =  @{ "\"" ~ str_inner ~ "\"" }
str_inner     =  @{ (!("\"" | "\\") ~ ANY)* ~ (str_escape ~ str_inner)? }
str_escape    =  @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) }
macro_ident   =  @{ XID_START ~ XID_CONTINUE* ~ "!" }

