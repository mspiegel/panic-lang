WHITESPACE    =  _{ " " | "\t" | NEWLINE }

program       =   { SOI ~ decl* ~ EOI }
decl          =   { type_decl | fn_decl }

type_decl     =   { prim_decl | union_decl | val_decl } // | res_decl | ref_decl
prim_decl     =   { "_decl_" ~ ident ~ "_primitive_" ~ "_type_" ~ decl_relation? ~ "{" ~ decl_methods? ~ "}" }
union_decl    =   { "_decl_" ~ ident ~ "_union_" ~ "_type_" ~ type_expr ~ decl_relation? ~ "{" ~ decl_methods? ~ "}" }
val_decl      =   { "_decl_" ~ ident ~ "_value_" ~ "_type_" ~ decl_relation? ~ "{" ~ decl_fields? ~ decl_methods? ~ "}" }

decl_relation =   { "_is_" ~ decl_expr }
decl_expr     =   { decl_isect | decl_ref }
decl_isect    =   { "(" ~ decl_ref ~ ( "&" ~ decl_ref )+ ~ ")" }
decl_ref      =   { ident }

decl_fields   =   { decl_field ~ ("," ~ decl_field)* ~ ","?  }
decl_methods  =   { decl_method+ }
decl_field    =   { ident ~ ":" ~ type_expr }
decl_method   =   { ident ~ ":" ~ fn_signature ~ stmt_block }

fn_decl       =   { "_decl_" ~ ident ~ fn_signature ~ stmt_block }
fn_signature  =   { "_fn_" ~ "(" ~ func_params? ~ ")" ~ "->" ~ type_expr }
type_expr     =   { type_union | type_ref }
type_union    =   { "(" ~ type_ref ~ ( "|" ~ type_ref )+ ~ ")" }
type_ref      =   { ident }
func_params   =   { func_param ~ ("," ~ func_param)* ~ ","? }
func_param    =   { ident ~ ":" ~ type_expr }
stmt_block    =   { "{" ~ stmt* ~ "}" }

stmt          =   { empty_stmt | let_stmt | return_stmt | if_stmt | expr_stmt }
empty_stmt    =   { ";" }
let_stmt      =   { "_let_" ~ ident ~ ":" ~ type_expr ~ "=" ~ expr ~ ";" }
expr_stmt     =   { expr ~ ";" }
return_stmt   =   { "_return_" ~ expr ~ ";" }
if_stmt       =   { "_if_" ~ expr ~ stmt_block ~ ( "_else_" ~ ( stmt_block | if_stmt ) )? }

expr          =   { associative | binop | factor }
associative   =  _{ addops | mulops | andops | orops }
addops        =   { factor ~ ("+" ~ factor)+ }
mulops        =   { factor ~ ("*" ~ factor)+ }
andops        =   { factor ~ ("&&" ~ factor)+ }
orops         =   { factor ~ ("||" ~ factor)+ }
binop         =   { factor ~ (compare | arith) ~ factor }
compare       =  _{ le | lt | ge | gt | eq | ne }
arith         =  _{ sub | div | rem }
factor        =  _{ prefix | suffix | term }
prefix        =   { (negate | not) ~ term }
suffix        =   { term ~ question }
term          =  _{ func_call | primary }

lt            =   { "<"  }
le            =   { "<=" }
eq            =   { "==" }
ne            =   { "!=" }
ge            =   { ">=" }
gt            =   { ">"  }
sub           =   { "-"  }
div           =   { "/"  }
rem           =   { "%"  }
negate        =   { "-"  }
not           =   { "!"  }
question      =   { "?"  }

func_call     =   { ident ~ "(" ~ call_params? ~ ")" }
call_params   =  _{ expr ~ ("," ~ expr)* ~ ","? }
primary       =  _{ ident | literal | paren }
paren         =   { "(" ~ expr ~ ")" }
ident         =  _{ !bare_keyword ~ !keyword ~ identifier }
literal       =  _{ int_literal | bool_literal }
int_literal   =  @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
bool_literal  =  @{ "true" | "false" }

bare_keyword  =  @{ "true" | "false" }
keyword       =  @{ "_" ~ ASCII_ALPHANUMERIC+ ~ "_" }
identifier    =  @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

str_literal   =  @{ "\"" ~ str_inner ~ "\"" }
str_inner     =  @{ (!("\"" | "\\") ~ ANY)* ~ (str_escape ~ str_inner)? }
str_escape    =  @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) }

