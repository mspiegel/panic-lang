WHITESPACE    =  _{ " " | "\t" | NEWLINE }

program       =   { SOI ~ topdecl* ~ EOI }
topdecl       =   { function }
function      =   { "fn" ~ ident ~ "(" ~ funcParams? ~ ")" ~ "->" ~ typename ~ stmtBlock }
typename      =   { typei32 | typebool | typeunit }
typei32       =   { "i32" }
typebool      =   { "bool" }
typeunit      =   { "()" }
funcParams    =   { funcParam ~ ("," ~ funcParam)* ~ ","? }
funcParam     =   { ident ~ ":" ~ typename }
stmtBlock     =   { "{" ~ stmt+ ~ "}" }

stmt          =   { ";" | macroStmt | letStmt | returnStmt | ifStmt | exprStmt }
letStmt       =   { "let" ~ ident ~ ":" ~ typename ~ "=" ~ expr ~ ";" }
exprStmt      =   { expr ~ ";" }
returnStmt    =   { "return" ~ expr ~ ";" }
ifStmt        =   { "if" ~ expr ~ stmtBlock ~ ( "else" ~ ( stmtBlock | ifStmt ) )? }

expr          =   { compare }
compare       =   { addsub ~ ( ( lt | le | eq | ne | ge | gt ) ~ addsub )? }
addsub        =   { muldiv ~ ( (add | sub) ~ muldiv )* }
muldiv        =   { unary ~  ( (mul | div | modulo ) ~ unary )* }
unary         =   { negative? ~ term }
term          =   { funcCall | primary }

lt            =   { "<"  }
le            =   { "<=" }
eq            =   { "==" }
ne            =   { "!=" }
ge            =   { ">=" }
gt            =   { ">"  }
add           =   { "+"  }
sub           =   { "-"  }
mul           =   { "*"  }
div           =   { "/"  }
modulo        =   { "%"  }
negative      =   { "-"  }

funcCall      =   { ident ~ "(" ~ callParams? ~ ")" }
callParams    =   { expr ~ ("," ~ expr)* ~ ","? }
primary       =   { ident | literal | paren }
paren         =   { "(" ~ expr ~ ")" }
ident         =   { !keyword ~ anyIdent }
literal       =   { intLiteral | truelit | falselit | unitlit }
truelit       =   { "true"  }
falselit      =   { "false" }
unitlit       =   { "()"    }

intLiteral    =  @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
anyIdent      =  @{ XID_START ~ XID_CONTINUE* }
keyword       =  @{ "fn" | "i32" | "bool" | "let" | "return" | "if" | "else" | "true" | "false" }

macroStmt     =   { macroIdent ~ "(" ~ macroParams? ~ ")" ~ ";" }
macroParams   =   { macroExpr ~ ("," ~ macroExpr)* ~ ","? }
macroExpr     =   { compare | strLiteral }
strLiteral    =  @{ "\"" ~ strInner ~ "\"" }
strInner      =  @{ (!("\"" | "\\") ~ ANY)* ~ (strEscape ~ strInner)? }
strEscape     =  @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) }
macroIdent    =  @{ XID_START ~ XID_CONTINUE* ~ "!" }

