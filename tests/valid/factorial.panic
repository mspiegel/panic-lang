_decl_ ExpectedNonNegative _primitive_ _type_ _is_ (Error & Provenance) { }

_decl_ factorial _fn_ (n : i32) -> (i32 | ExpectedNonNegative | ArithmeticOverflow | StackOverflow) {
    _if_ n < 0 {
        _return_ ExpectedNonNegative;
    } _else_ _if_ n == 0 {
        _return_ 1;
    } _else_ {
        _return_ n * factorial((n - 1)?)?;
    }
}

_decl_ main _fn_ () -> i32 {
    _debug(factorial(-1));
    _debug(factorial(0));
    _debug(factorial(1));
    _debug(factorial(2));
    _debug(factorial(3));
    _debug(factorial(4));
    _debug(factorial(5));
    _debug(factorial(6));
    _debug(factorial(7));
    _debug(factorial(8));
    _debug(factorial(9));
    _debug(factorial(10));
    _debug(factorial(11));
    _debug(factorial(12));
    _debug(factorial(13));
    _return_ 0;
}